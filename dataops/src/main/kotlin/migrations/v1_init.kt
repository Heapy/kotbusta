package migrations

import migrations.model.Migration
import org.intellij.lang.annotations.Language

@Language("SQLite")
private val sql = """
CREATE TABLE IF NOT EXISTS USERS
(
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    GOOGLE_ID  TEXT UNIQUE      NOT NULL,
    EMAIL      TEXT             NOT NULL,
    NAME       TEXT             NOT NULL,
    AVATAR_URL TEXT,
    STATUS     TEXT             NOT NULL CHECK (STATUS IN ('PENDING', 'APPROVED', 'REJECTED', 'DEACTIVATED')),
    CREATED_AT TEXT             NOT NULL,
    UPDATED_AT TEXT             NOT NULL
);
$next
CREATE TABLE IF NOT EXISTS AUTHORS
(
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    FULL_NAME  TEXT        NOT NULL
);
$next
CREATE TABLE IF NOT EXISTS SERIES
(
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    NAME       TEXT        NOT NULL
);
$next
CREATE TABLE IF NOT EXISTS BOOKS
(
    ID            INTEGER PRIMARY KEY,
    TITLE         TEXT        NOT NULL,
    ANNOTATION    TEXT,
    GENRE         TEXT,
    LANGUAGE      TEXT        NOT NULL,
    SERIES_ID     INTEGER,
    SERIES_NUMBER INTEGER,
    FILE_FORMAT   TEXT        NOT NULL,
    FILE_PATH     TEXT        NOT NULL,
    ARCHIVE_PATH  TEXT        NOT NULL,
    FILE_SIZE     INTEGER,
    DATE_ADDED    TEXT        NOT NULL,
    COVER_IMAGE   BLOB,
    CREATED_AT    TEXT        NOT NULL,
    FOREIGN KEY (SERIES_ID) REFERENCES SERIES (ID)
);
$next
CREATE TABLE IF NOT EXISTS BOOK_AUTHORS
(
    BOOK_ID   INTEGER NOT NULL,
    AUTHOR_ID INTEGER NOT NULL,
    PRIMARY KEY (BOOK_ID, AUTHOR_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS (ID) ON DELETE CASCADE,
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHORS (ID) ON DELETE CASCADE
);
$next
CREATE TABLE IF NOT EXISTS USER_STARS
(
    USER_ID    INTEGER      NOT NULL,
    BOOK_ID    INTEGER      NOT NULL,
    CREATED_AT TEXT         NOT NULL,
    PRIMARY KEY (USER_ID, BOOK_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS (ID) ON DELETE CASCADE
);
$next
CREATE TABLE IF NOT EXISTS USER_COMMENTS
(
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    USER_ID    INTEGER      NOT NULL,
    BOOK_ID    INTEGER      NOT NULL,
    COMMENT    TEXT         NOT NULL,
    CREATED_AT TEXT         NOT NULL,
    UPDATED_AT TEXT         NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS (ID) ON DELETE CASCADE
);
$next
CREATE TABLE IF NOT EXISTS USER_NOTES
(
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    USER_ID    INTEGER      NOT NULL,
    BOOK_ID    INTEGER      NOT NULL,
    NOTE       TEXT         NOT NULL,
    IS_PRIVATE INTEGER      NOT NULL,
    CREATED_AT TEXT         NOT NULL,
    UPDATED_AT TEXT         NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS (ID) ON DELETE CASCADE
);
$next
CREATE TABLE IF NOT EXISTS DOWNLOADS
(
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    USER_ID    INTEGER      NOT NULL,
    BOOK_ID    INTEGER      NOT NULL,
    FORMAT     TEXT         NOT NULL,
    CREATED_AT TEXT         NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS (ID) ON DELETE CASCADE
);
$next
CREATE INDEX IF NOT EXISTS IDX_BOOKS_TITLE ON BOOKS (TITLE);
$next
CREATE INDEX IF NOT EXISTS IDX_BOOKS_GENRE ON BOOKS (GENRE);
$next
CREATE INDEX IF NOT EXISTS IDX_BOOKS_LANGUAGE ON BOOKS (LANGUAGE);
$next
CREATE INDEX IF NOT EXISTS IDX_BOOKS_SERIES ON BOOKS (SERIES_ID);
$next
CREATE INDEX IF NOT EXISTS IDX_AUTHORS_NAME ON AUTHORS (FULL_NAME);
$next
CREATE INDEX IF NOT EXISTS IDX_USER_COMMENTS_BOOK ON USER_COMMENTS (BOOK_ID);
$next
CREATE INDEX IF NOT EXISTS IDX_USER_COMMENTS_USER ON USER_COMMENTS (USER_ID);
$next
CREATE INDEX IF NOT EXISTS IDX_DOWNLOADS_RECENT ON DOWNLOADS (CREATED_AT DESC);
""".trimIndent()

val v1: Migration
    get() = Migration(
        version = 1,
        script = sql,
    )
