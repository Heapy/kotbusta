/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.daos


import io.heapy.kotbusta.jooq.tables.BookAuthors
import io.heapy.kotbusta.jooq.tables.records.BookAuthorsRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.Record2
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class BookAuthorsDao(configuration: Configuration?) : DAOImpl<BookAuthorsRecord, io.heapy.kotbusta.jooq.tables.pojos.BookAuthors, Record2<Long?, Long?>>(BookAuthors.BOOK_AUTHORS, io.heapy.kotbusta.jooq.tables.pojos.BookAuthors::class.java, configuration) {

    /**
     * Create a new BookAuthorsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: io.heapy.kotbusta.jooq.tables.pojos.BookAuthors): Record2<Long?, Long?> = compositeKeyRecord(o.bookId, o.authorId)

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfBookId(lowerInclusive: Long, upperInclusive: Long): List<io.heapy.kotbusta.jooq.tables.pojos.BookAuthors> = fetchRange(BookAuthors.BOOK_AUTHORS.BOOK_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    fun fetchByBookId(vararg values: Long): List<io.heapy.kotbusta.jooq.tables.pojos.BookAuthors> = fetch(BookAuthors.BOOK_AUTHORS.BOOK_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAuthorId(lowerInclusive: Long, upperInclusive: Long): List<io.heapy.kotbusta.jooq.tables.pojos.BookAuthors> = fetchRange(BookAuthors.BOOK_AUTHORS.AUTHOR_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    fun fetchByAuthorId(vararg values: Long): List<io.heapy.kotbusta.jooq.tables.pojos.BookAuthors> = fetch(BookAuthors.BOOK_AUTHORS.AUTHOR_ID, *values.toTypedArray())
}
