/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.records


import io.heapy.kotbusta.jooq.tables.Books

import kotlin.time.Instant

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class BooksRecord private constructor() : UpdatableRecordImpl<BooksRecord>(Books.BOOKS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var title: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var `annotation`: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var language: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var seriesId: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var seriesNumber: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var fileFormat: String
        set(value): Unit = set(6, value)
        get(): String = get(6) as String

    open var filePath: String
        set(value): Unit = set(7, value)
        get(): String = get(7) as String

    open var archivePath: String
        set(value): Unit = set(8, value)
        get(): String = get(8) as String

    open var fileSize: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    open var dateAdded: Instant
        set(value): Unit = set(10, value)
        get(): Instant = get(10) as Instant

    open var coverImage: ByteArray?
        set(value): Unit = set(11, value)
        get(): ByteArray? = get(11) as ByteArray?

    open var createdAt: Instant
        set(value): Unit = set(12, value)
        get(): Instant = get(12) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised BooksRecord
     */
    constructor(id: Int? = null, title: String, `annotation`: String? = null, language: String, seriesId: Int? = null, seriesNumber: Int? = null, fileFormat: String, filePath: String, archivePath: String, fileSize: Int? = null, dateAdded: Instant, coverImage: ByteArray? = null, createdAt: Instant): this() {
        this.id = id
        this.title = title
        this.`annotation` = `annotation`
        this.language = language
        this.seriesId = seriesId
        this.seriesNumber = seriesNumber
        this.fileFormat = fileFormat
        this.filePath = filePath
        this.archivePath = archivePath
        this.fileSize = fileSize
        this.dateAdded = dateAdded
        this.coverImage = coverImage
        this.createdAt = createdAt
        resetTouchedOnNotNull()
    }
}
