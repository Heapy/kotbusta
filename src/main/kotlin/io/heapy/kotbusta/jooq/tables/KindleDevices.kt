/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables


import io.heapy.kotbusta.jooq.DefaultSchema
import io.heapy.kotbusta.jooq.indexes.IDX_KINDLE_DEVICES_EMAIL
import io.heapy.kotbusta.jooq.indexes.IDX_KINDLE_DEVICES_USER
import io.heapy.kotbusta.jooq.keys.KINDLE_DEVICES__FK_KINDLE_DEVICES_PK_USERS
import io.heapy.kotbusta.jooq.keys.KINDLE_DEVICES__PK_KINDLE_DEVICES
import io.heapy.kotbusta.jooq.keys.KINDLE_DEVICES__UK_KINDLE_DEVICES_1_13757864
import io.heapy.kotbusta.jooq.keys.KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_KINDLE_DEVICES
import io.heapy.kotbusta.jooq.tables.KindleSendQueue.KindleSendQueuePath
import io.heapy.kotbusta.jooq.tables.Users.UsersPath
import io.heapy.kotbusta.jooq.tables.records.KindleDevicesRecord

import java.time.Instant

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class KindleDevices(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, KindleDevicesRecord>?,
    parentPath: InverseForeignKey<out Record, KindleDevicesRecord>?,
    aliased: Table<KindleDevicesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<KindleDevicesRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>KINDLE_DEVICES</code>
         */
        val KINDLE_DEVICES: KindleDevices = KindleDevices()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<KindleDevicesRecord> = KindleDevicesRecord::class.java

    /**
     * The column <code>KINDLE_DEVICES.ID</code>.
     */
    val ID: TableField<KindleDevicesRecord, Int?> = createField(DSL.name("ID"), SQLDataType.INTEGER.identity(true), this, "")

    /**
     * The column <code>KINDLE_DEVICES.USER_ID</code>.
     */
    val USER_ID: TableField<KindleDevicesRecord, Int?> = createField(DSL.name("USER_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KINDLE_DEVICES.EMAIL</code>.
     */
    val EMAIL: TableField<KindleDevicesRecord, String?> = createField(DSL.name("EMAIL"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>KINDLE_DEVICES.NAME</code>.
     */
    val NAME: TableField<KindleDevicesRecord, String?> = createField(DSL.name("NAME"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>KINDLE_DEVICES.CREATED_AT</code>.
     */
    val CREATED_AT: TableField<KindleDevicesRecord, Instant?> = createField(DSL.name("CREATED_AT"), SQLDataType.INSTANT.nullable(false), this, "")

    /**
     * The column <code>KINDLE_DEVICES.UPDATED_AT</code>.
     */
    val UPDATED_AT: TableField<KindleDevicesRecord, Instant?> = createField(DSL.name("UPDATED_AT"), SQLDataType.INSTANT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<KindleDevicesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<KindleDevicesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<KindleDevicesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>KINDLE_DEVICES</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KINDLE_DEVICES</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KINDLE_DEVICES</code> table reference
     */
    constructor(): this(DSL.name("KINDLE_DEVICES"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, KindleDevicesRecord>?, parentPath: InverseForeignKey<out Record, KindleDevicesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, KINDLE_DEVICES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class KindleDevicesPath : KindleDevices, Path<KindleDevicesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, KindleDevicesRecord>?, parentPath: InverseForeignKey<out Record, KindleDevicesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<KindleDevicesRecord>): super(alias, aliased)
        override fun `as`(alias: String): KindleDevicesPath = KindleDevicesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): KindleDevicesPath = KindleDevicesPath(alias, this)
        override fun `as`(alias: Table<*>): KindleDevicesPath = KindleDevicesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_KINDLE_DEVICES_EMAIL, IDX_KINDLE_DEVICES_USER)
    override fun getIdentity(): Identity<KindleDevicesRecord, Int?> = super.getIdentity() as Identity<KindleDevicesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<KindleDevicesRecord> = KINDLE_DEVICES__PK_KINDLE_DEVICES
    override fun getUniqueKeys(): List<UniqueKey<KindleDevicesRecord>> = listOf(KINDLE_DEVICES__UK_KINDLE_DEVICES_1_13757864)
    override fun getReferences(): List<ForeignKey<KindleDevicesRecord, *>> = listOf(KINDLE_DEVICES__FK_KINDLE_DEVICES_PK_USERS)

    /**
     * Get the implicit join path to the <code>USERS</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, KINDLE_DEVICES__FK_KINDLE_DEVICES_PK_USERS, null) }

    private lateinit var _kindleSendQueue: KindleSendQueuePath

    /**
     * Get the implicit to-many join path to the <code>KINDLE_SEND_QUEUE</code>
     * table
     */
    fun kindleSendQueue(): KindleSendQueuePath {
        if (!this::_kindleSendQueue.isInitialized)
            _kindleSendQueue = KindleSendQueuePath(this, null, KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_KINDLE_DEVICES.inverseKey)

        return _kindleSendQueue;
    }

    val kindleSendQueue: KindleSendQueuePath
        get(): KindleSendQueuePath = kindleSendQueue()
    override fun `as`(alias: String): KindleDevices = KindleDevices(DSL.name(alias), this)
    override fun `as`(alias: Name): KindleDevices = KindleDevices(alias, this)
    override fun `as`(alias: Table<*>): KindleDevices = KindleDevices(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): KindleDevices = KindleDevices(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): KindleDevices = KindleDevices(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): KindleDevices = KindleDevices(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): KindleDevices = KindleDevices(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): KindleDevices = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): KindleDevices = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): KindleDevices = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): KindleDevices = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): KindleDevices = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): KindleDevices = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): KindleDevices = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): KindleDevices = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): KindleDevices = where(DSL.notExists(select))
}
