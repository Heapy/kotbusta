/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.records


import io.heapy.kotbusta.jooq.tables.UserComments
import io.heapy.kotbusta.jooq.tables.interfaces.IUserComments

import java.time.OffsetDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class UserCommentsRecord private constructor() : UpdatableRecordImpl<UserCommentsRecord>(UserComments.USER_COMMENTS), IUserComments {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var userId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open override var bookId: Long
        set(value): Unit = set(2, value)
        get(): Long = get(2) as Long

    open override var comment: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open override var createdAt: OffsetDateTime?
        set(value): Unit = set(4, value)
        get(): OffsetDateTime? = get(4) as OffsetDateTime?

    open override var updatedAt: OffsetDateTime?
        set(value): Unit = set(5, value)
        get(): OffsetDateTime? = get(5) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IUserComments) {
        this.id = from.id
        this.userId = from.userId
        this.bookId = from.bookId
        this.comment = from.comment
        this.createdAt = from.createdAt
        this.updatedAt = from.updatedAt
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised UserCommentsRecord
     */
    constructor(id: Long? = null, userId: Long, bookId: Long, comment: String, createdAt: OffsetDateTime? = null, updatedAt: OffsetDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.bookId = bookId
        this.comment = comment
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised UserCommentsRecord
     */
    constructor(value: IUserComments?): this() {
        if (value != null) {
            this.id = value.id
            this.userId = value.userId
            this.bookId = value.bookId
            this.comment = value.comment
            this.createdAt = value.createdAt
            this.updatedAt = value.updatedAt
            resetTouchedOnNotNull()
        }
    }
}
