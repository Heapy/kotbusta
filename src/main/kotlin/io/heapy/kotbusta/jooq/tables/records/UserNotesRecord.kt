/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.records


import io.heapy.kotbusta.jooq.tables.UserNotes

import kotlin.time.Instant

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class UserNotesRecord private constructor() : UpdatableRecordImpl<UserNotesRecord>(UserNotes.USER_NOTES) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var userId: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    open var bookId: Int
        set(value): Unit = set(2, value)
        get(): Int = get(2) as Int

    open var note: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsPrivate")
    open var isPrivate: Int
        set(value): Unit = set(4, value)
        get(): Int = get(4) as Int

    open var createdAt: Instant
        set(value): Unit = set(5, value)
        get(): Instant = get(5) as Instant

    open var updatedAt: Instant
        set(value): Unit = set(6, value)
        get(): Instant = get(6) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised UserNotesRecord
     */
    constructor(id: Int? = null, userId: Int, bookId: Int, note: String, isPrivate: Int, createdAt: Instant, updatedAt: Instant): this() {
        this.id = id
        this.userId = userId
        this.bookId = bookId
        this.note = note
        this.isPrivate = isPrivate
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetTouchedOnNotNull()
    }
}
