/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.records


import io.heapy.kotbusta.jooq.enums.JobStatusEnum
import io.heapy.kotbusta.jooq.enums.JobTypeEnum
import io.heapy.kotbusta.jooq.tables.ImportJobs

import java.time.OffsetDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ImportJobsRecord private constructor() : UpdatableRecordImpl<ImportJobsRecord>(ImportJobs.IMPORT_JOBS) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var jobType: JobTypeEnum
        set(value): Unit = set(1, value)
        get(): JobTypeEnum = get(1) as JobTypeEnum

    open var status: JobStatusEnum
        set(value): Unit = set(2, value)
        get(): JobStatusEnum = get(2) as JobStatusEnum

    open var progress: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var inpFilesProcessed: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var booksAdded: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var booksUpdated: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var booksDeleted: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var coversAdded: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var bookErrors: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    open var coverErrors: Int?
        set(value): Unit = set(10, value)
        get(): Int? = get(10) as Int?

    open var errorMessage: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open var startedAt: OffsetDateTime?
        set(value): Unit = set(12, value)
        get(): OffsetDateTime? = get(12) as OffsetDateTime?

    open var completedAt: OffsetDateTime?
        set(value): Unit = set(13, value)
        get(): OffsetDateTime? = get(13) as OffsetDateTime?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(14, value)
        get(): OffsetDateTime? = get(14) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised ImportJobsRecord
     */
    constructor(id: Long? = null, jobType: JobTypeEnum, status: JobStatusEnum, progress: String? = null, inpFilesProcessed: Int? = null, booksAdded: Int? = null, booksUpdated: Int? = null, booksDeleted: Int? = null, coversAdded: Int? = null, bookErrors: Int? = null, coverErrors: Int? = null, errorMessage: String? = null, startedAt: OffsetDateTime? = null, completedAt: OffsetDateTime? = null, createdAt: OffsetDateTime? = null): this() {
        this.id = id
        this.jobType = jobType
        this.status = status
        this.progress = progress
        this.inpFilesProcessed = inpFilesProcessed
        this.booksAdded = booksAdded
        this.booksUpdated = booksUpdated
        this.booksDeleted = booksDeleted
        this.coversAdded = coversAdded
        this.bookErrors = bookErrors
        this.coverErrors = coverErrors
        this.errorMessage = errorMessage
        this.startedAt = startedAt
        this.completedAt = completedAt
        this.createdAt = createdAt
        resetTouchedOnNotNull()
    }
}
