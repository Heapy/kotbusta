/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.records


import io.heapy.kotbusta.jooq.enums.JobStatusEnum
import io.heapy.kotbusta.jooq.enums.JobTypeEnum
import io.heapy.kotbusta.jooq.tables.ImportJobs
import io.heapy.kotbusta.jooq.tables.interfaces.IImportJobs

import java.time.OffsetDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ImportJobsRecord private constructor() : UpdatableRecordImpl<ImportJobsRecord>(ImportJobs.IMPORT_JOBS), IImportJobs {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var jobType: JobTypeEnum
        set(value): Unit = set(1, value)
        get(): JobTypeEnum = get(1) as JobTypeEnum

    open override var status: JobStatusEnum
        set(value): Unit = set(2, value)
        get(): JobStatusEnum = get(2) as JobStatusEnum

    open override var progress: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open override var inpFilesProcessed: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open override var booksAdded: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open override var booksUpdated: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open override var booksDeleted: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open override var coversAdded: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open override var bookErrors: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    open override var coverErrors: Int?
        set(value): Unit = set(10, value)
        get(): Int? = get(10) as Int?

    open override var errorMessage: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open override var startedAt: OffsetDateTime?
        set(value): Unit = set(12, value)
        get(): OffsetDateTime? = get(12) as OffsetDateTime?

    open override var completedAt: OffsetDateTime?
        set(value): Unit = set(13, value)
        get(): OffsetDateTime? = get(13) as OffsetDateTime?

    open override var createdAt: OffsetDateTime?
        set(value): Unit = set(14, value)
        get(): OffsetDateTime? = get(14) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IImportJobs) {
        this.id = from.id
        this.jobType = from.jobType
        this.status = from.status
        this.progress = from.progress
        this.inpFilesProcessed = from.inpFilesProcessed
        this.booksAdded = from.booksAdded
        this.booksUpdated = from.booksUpdated
        this.booksDeleted = from.booksDeleted
        this.coversAdded = from.coversAdded
        this.bookErrors = from.bookErrors
        this.coverErrors = from.coverErrors
        this.errorMessage = from.errorMessage
        this.startedAt = from.startedAt
        this.completedAt = from.completedAt
        this.createdAt = from.createdAt
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised ImportJobsRecord
     */
    constructor(id: Long? = null, jobType: JobTypeEnum, status: JobStatusEnum, progress: String? = null, inpFilesProcessed: Int? = null, booksAdded: Int? = null, booksUpdated: Int? = null, booksDeleted: Int? = null, coversAdded: Int? = null, bookErrors: Int? = null, coverErrors: Int? = null, errorMessage: String? = null, startedAt: OffsetDateTime? = null, completedAt: OffsetDateTime? = null, createdAt: OffsetDateTime? = null): this() {
        this.id = id
        this.jobType = jobType
        this.status = status
        this.progress = progress
        this.inpFilesProcessed = inpFilesProcessed
        this.booksAdded = booksAdded
        this.booksUpdated = booksUpdated
        this.booksDeleted = booksDeleted
        this.coversAdded = coversAdded
        this.bookErrors = bookErrors
        this.coverErrors = coverErrors
        this.errorMessage = errorMessage
        this.startedAt = startedAt
        this.completedAt = completedAt
        this.createdAt = createdAt
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised ImportJobsRecord
     */
    constructor(value: IImportJobs?): this() {
        if (value != null) {
            this.id = value.id
            this.jobType = value.jobType
            this.status = value.status
            this.progress = value.progress
            this.inpFilesProcessed = value.inpFilesProcessed
            this.booksAdded = value.booksAdded
            this.booksUpdated = value.booksUpdated
            this.booksDeleted = value.booksDeleted
            this.coversAdded = value.coversAdded
            this.bookErrors = value.bookErrors
            this.coverErrors = value.coverErrors
            this.errorMessage = value.errorMessage
            this.startedAt = value.startedAt
            this.completedAt = value.completedAt
            this.createdAt = value.createdAt
            resetTouchedOnNotNull()
        }
    }
}
