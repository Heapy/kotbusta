/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.daos


import io.heapy.kotbusta.jooq.tables.Users
import io.heapy.kotbusta.jooq.tables.records.UsersRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class UsersDao(configuration: Configuration?) : DAOImpl<UsersRecord, io.heapy.kotbusta.jooq.tables.pojos.Users, Long>(Users.USERS, io.heapy.kotbusta.jooq.tables.pojos.Users::class.java, configuration) {

    /**
     * Create a new UsersDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: io.heapy.kotbusta.jooq.tables.pojos.Users): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetch(Users.USERS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): io.heapy.kotbusta.jooq.tables.pojos.Users? = fetchOne(Users.USERS.ID, value)

    /**
     * Fetch records that have <code>google_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfGoogleId(lowerInclusive: String, upperInclusive: String): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetchRange(Users.USERS.GOOGLE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>google_id IN (values)</code>
     */
    fun fetchByGoogleId(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetch(Users.USERS.GOOGLE_ID, *values)

    /**
     * Fetch a unique record that has <code>google_id = value</code>
     */
    fun fetchOneByGoogleId(value: String): io.heapy.kotbusta.jooq.tables.pojos.Users? = fetchOne(Users.USERS.GOOGLE_ID, value)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String, upperInclusive: String): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetchRange(Users.USERS.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetch(Users.USERS.EMAIL, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetchRange(Users.USERS.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetch(Users.USERS.NAME, *values)

    /**
     * Fetch records that have <code>avatar_url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAvatarUrl(lowerInclusive: String?, upperInclusive: String?): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetchRange(Users.USERS.AVATAR_URL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>avatar_url IN (values)</code>
     */
    fun fetchByAvatarUrl(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetch(Users.USERS.AVATAR_URL, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetchRange(Users.USERS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetch(Users.USERS.CREATED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetchRange(Users.USERS.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: OffsetDateTime): List<io.heapy.kotbusta.jooq.tables.pojos.Users> = fetch(Users.USERS.UPDATED_AT, *values)
}
