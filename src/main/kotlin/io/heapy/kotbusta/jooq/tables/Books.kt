/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables


import io.heapy.kotbusta.jooq.DefaultSchema
import io.heapy.kotbusta.jooq.KotlinInstantConverter
import io.heapy.kotbusta.jooq.indexes.IDX_BOOKS_GENRE
import io.heapy.kotbusta.jooq.indexes.IDX_BOOKS_LANGUAGE
import io.heapy.kotbusta.jooq.indexes.IDX_BOOKS_SERIES
import io.heapy.kotbusta.jooq.indexes.IDX_BOOKS_TITLE
import io.heapy.kotbusta.jooq.keys.BOOKS__FK_BOOKS_PK_SERIES
import io.heapy.kotbusta.jooq.keys.BOOKS__PK_BOOKS
import io.heapy.kotbusta.jooq.keys.BOOK_AUTHORS__FK_BOOK_AUTHORS_PK_BOOKS
import io.heapy.kotbusta.jooq.keys.DOWNLOADS__FK_DOWNLOADS_PK_BOOKS
import io.heapy.kotbusta.jooq.keys.KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_BOOKS
import io.heapy.kotbusta.jooq.keys.USER_COMMENTS__FK_USER_COMMENTS_PK_BOOKS
import io.heapy.kotbusta.jooq.keys.USER_NOTES__FK_USER_NOTES_PK_BOOKS
import io.heapy.kotbusta.jooq.keys.USER_STARS__FK_USER_STARS_PK_BOOKS
import io.heapy.kotbusta.jooq.tables.Authors.AuthorsPath
import io.heapy.kotbusta.jooq.tables.BookAuthors.BookAuthorsPath
import io.heapy.kotbusta.jooq.tables.Downloads.DownloadsPath
import io.heapy.kotbusta.jooq.tables.KindleSendQueue.KindleSendQueuePath
import io.heapy.kotbusta.jooq.tables.Series.SeriesPath
import io.heapy.kotbusta.jooq.tables.UserComments.UserCommentsPath
import io.heapy.kotbusta.jooq.tables.UserNotes.UserNotesPath
import io.heapy.kotbusta.jooq.tables.UserStars.UserStarsPath
import io.heapy.kotbusta.jooq.tables.Users.UsersPath
import io.heapy.kotbusta.jooq.tables.records.BooksRecord

import kotlin.collections.Collection
import kotlin.collections.List
import kotlin.time.Instant

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Books(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BooksRecord>?,
    parentPath: InverseForeignKey<out Record, BooksRecord>?,
    aliased: Table<BooksRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BooksRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>BOOKS</code>
         */
        val BOOKS: Books = Books()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BooksRecord> = BooksRecord::class.java

    /**
     * The column <code>BOOKS.ID</code>.
     */
    val ID: TableField<BooksRecord, Int?> = createField(DSL.name("ID"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>BOOKS.TITLE</code>.
     */
    val TITLE: TableField<BooksRecord, String?> = createField(DSL.name("TITLE"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>BOOKS.ANNOTATION</code>.
     */
    val ANNOTATION: TableField<BooksRecord, String?> = createField(DSL.name("ANNOTATION"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>BOOKS.GENRE</code>.
     */
    val GENRE: TableField<BooksRecord, String?> = createField(DSL.name("GENRE"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>BOOKS.LANGUAGE</code>.
     */
    val LANGUAGE: TableField<BooksRecord, String?> = createField(DSL.name("LANGUAGE"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>BOOKS.SERIES_ID</code>.
     */
    val SERIES_ID: TableField<BooksRecord, Int?> = createField(DSL.name("SERIES_ID"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>BOOKS.SERIES_NUMBER</code>.
     */
    val SERIES_NUMBER: TableField<BooksRecord, Int?> = createField(DSL.name("SERIES_NUMBER"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>BOOKS.FILE_PATH</code>.
     */
    val FILE_PATH: TableField<BooksRecord, String?> = createField(DSL.name("FILE_PATH"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>BOOKS.ARCHIVE_PATH</code>.
     */
    val ARCHIVE_PATH: TableField<BooksRecord, String?> = createField(DSL.name("ARCHIVE_PATH"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>BOOKS.FILE_SIZE</code>.
     */
    val FILE_SIZE: TableField<BooksRecord, Int?> = createField(DSL.name("FILE_SIZE"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>BOOKS.DATE_ADDED</code>.
     */
    val DATE_ADDED: TableField<BooksRecord, Instant?> = createField(DSL.name("DATE_ADDED"), SQLDataType.CLOB.nullable(false), this, "", KotlinInstantConverter())

    /**
     * The column <code>BOOKS.COVER_IMAGE</code>.
     */
    val COVER_IMAGE: TableField<BooksRecord, ByteArray?> = createField(DSL.name("COVER_IMAGE"), SQLDataType.BLOB, this, "")

    /**
     * The column <code>BOOKS.CREATED_AT</code>.
     */
    val CREATED_AT: TableField<BooksRecord, Instant?> = createField(DSL.name("CREATED_AT"), SQLDataType.CLOB.nullable(false), this, "", KotlinInstantConverter())

    private constructor(alias: Name, aliased: Table<BooksRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BooksRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BooksRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>BOOKS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>BOOKS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>BOOKS</code> table reference
     */
    constructor(): this(DSL.name("BOOKS"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BooksRecord>?, parentPath: InverseForeignKey<out Record, BooksRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BOOKS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BooksPath : Books, Path<BooksRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BooksRecord>?, parentPath: InverseForeignKey<out Record, BooksRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BooksRecord>): super(alias, aliased)
        override fun `as`(alias: String): BooksPath = BooksPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BooksPath = BooksPath(alias, this)
        override fun `as`(alias: Table<*>): BooksPath = BooksPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_BOOKS_GENRE, IDX_BOOKS_LANGUAGE, IDX_BOOKS_SERIES, IDX_BOOKS_TITLE)
    override fun getPrimaryKey(): UniqueKey<BooksRecord> = BOOKS__PK_BOOKS
    override fun getReferences(): List<ForeignKey<BooksRecord, *>> = listOf(BOOKS__FK_BOOKS_PK_SERIES)

    /**
     * Get the implicit join path to the <code>SERIES</code> table.
     */
    fun series(): SeriesPath = series
    val series: SeriesPath by lazy { SeriesPath(this, BOOKS__FK_BOOKS_PK_SERIES, null) }

    private lateinit var _bookAuthors: BookAuthorsPath

    /**
     * Get the implicit to-many join path to the <code>BOOK_AUTHORS</code> table
     */
    fun bookAuthors(): BookAuthorsPath {
        if (!this::_bookAuthors.isInitialized)
            _bookAuthors = BookAuthorsPath(this, null, BOOK_AUTHORS__FK_BOOK_AUTHORS_PK_BOOKS.inverseKey)

        return _bookAuthors;
    }

    val bookAuthors: BookAuthorsPath
        get(): BookAuthorsPath = bookAuthors()

    private lateinit var _downloads: DownloadsPath

    /**
     * Get the implicit to-many join path to the <code>DOWNLOADS</code> table
     */
    fun downloads(): DownloadsPath {
        if (!this::_downloads.isInitialized)
            _downloads = DownloadsPath(this, null, DOWNLOADS__FK_DOWNLOADS_PK_BOOKS.inverseKey)

        return _downloads;
    }

    val downloads: DownloadsPath
        get(): DownloadsPath = downloads()

    private lateinit var _kindleSendQueue: KindleSendQueuePath

    /**
     * Get the implicit to-many join path to the <code>KINDLE_SEND_QUEUE</code>
     * table
     */
    fun kindleSendQueue(): KindleSendQueuePath {
        if (!this::_kindleSendQueue.isInitialized)
            _kindleSendQueue = KindleSendQueuePath(this, null, KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_BOOKS.inverseKey)

        return _kindleSendQueue;
    }

    val kindleSendQueue: KindleSendQueuePath
        get(): KindleSendQueuePath = kindleSendQueue()

    private lateinit var _userComments: UserCommentsPath

    /**
     * Get the implicit to-many join path to the <code>USER_COMMENTS</code>
     * table
     */
    fun userComments(): UserCommentsPath {
        if (!this::_userComments.isInitialized)
            _userComments = UserCommentsPath(this, null, USER_COMMENTS__FK_USER_COMMENTS_PK_BOOKS.inverseKey)

        return _userComments;
    }

    val userComments: UserCommentsPath
        get(): UserCommentsPath = userComments()

    private lateinit var _userNotes: UserNotesPath

    /**
     * Get the implicit to-many join path to the <code>USER_NOTES</code> table
     */
    fun userNotes(): UserNotesPath {
        if (!this::_userNotes.isInitialized)
            _userNotes = UserNotesPath(this, null, USER_NOTES__FK_USER_NOTES_PK_BOOKS.inverseKey)

        return _userNotes;
    }

    val userNotes: UserNotesPath
        get(): UserNotesPath = userNotes()

    private lateinit var _userStars: UserStarsPath

    /**
     * Get the implicit to-many join path to the <code>USER_STARS</code> table
     */
    fun userStars(): UserStarsPath {
        if (!this::_userStars.isInitialized)
            _userStars = UserStarsPath(this, null, USER_STARS__FK_USER_STARS_PK_BOOKS.inverseKey)

        return _userStars;
    }

    val userStars: UserStarsPath
        get(): UserStarsPath = userStars()

    /**
     * Get the implicit many-to-many join path to the <code>AUTHORS</code> table
     */
    val authors: AuthorsPath
        get(): AuthorsPath = bookAuthors().authors()

    /**
     * Get the implicit many-to-many join path to the <code>USERS</code> table
     */
    val users: UsersPath
        get(): UsersPath = userStars().users()
    override fun `as`(alias: String): Books = Books(DSL.name(alias), this)
    override fun `as`(alias: Name): Books = Books(alias, this)
    override fun `as`(alias: Table<*>): Books = Books(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Books = Books(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Books = Books(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Books = Books(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Books = Books(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Books = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Books = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Books = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Books = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Books = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Books = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Books = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Books = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Books = where(DSL.notExists(select))
}
