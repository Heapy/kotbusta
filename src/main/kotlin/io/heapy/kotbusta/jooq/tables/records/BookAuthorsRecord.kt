/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.records


import io.heapy.kotbusta.jooq.tables.BookAuthors
import io.heapy.kotbusta.jooq.tables.interfaces.IBookAuthors

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class BookAuthorsRecord private constructor() : UpdatableRecordImpl<BookAuthorsRecord>(BookAuthors.BOOK_AUTHORS), IBookAuthors {

    open override var bookId: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    open override var authorId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, Long?> = super.key() as Record2<Long?, Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IBookAuthors) {
        this.bookId = from.bookId
        this.authorId = from.authorId
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised BookAuthorsRecord
     */
    constructor(bookId: Long, authorId: Long): this() {
        this.bookId = bookId
        this.authorId = authorId
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised BookAuthorsRecord
     */
    constructor(value: IBookAuthors?): this() {
        if (value != null) {
            this.bookId = value.bookId
            this.authorId = value.authorId
            resetTouchedOnNotNull()
        }
    }
}
