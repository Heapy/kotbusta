/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables


import io.heapy.kotbusta.jooq.DefaultSchema
import io.heapy.kotbusta.jooq.KotlinInstantConverter
import io.heapy.kotbusta.jooq.indexes.IDX_KINDLE_SEND_QUEUE_BOOK
import io.heapy.kotbusta.jooq.indexes.IDX_KINDLE_SEND_QUEUE_DEVICE
import io.heapy.kotbusta.jooq.indexes.IDX_KINDLE_SEND_QUEUE_NEXT_RUN
import io.heapy.kotbusta.jooq.indexes.IDX_KINDLE_SEND_QUEUE_STATUS
import io.heapy.kotbusta.jooq.indexes.IDX_KINDLE_SEND_QUEUE_USER
import io.heapy.kotbusta.jooq.keys.KINDLE_SEND_EVENTS__FK_KINDLE_SEND_EVENTS_PK_KINDLE_SEND_QUEUE
import io.heapy.kotbusta.jooq.keys.KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_BOOKS
import io.heapy.kotbusta.jooq.keys.KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_KINDLE_DEVICES
import io.heapy.kotbusta.jooq.keys.KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_USERS
import io.heapy.kotbusta.jooq.keys.KINDLE_SEND_QUEUE__PK_KINDLE_SEND_QUEUE
import io.heapy.kotbusta.jooq.tables.Books.BooksPath
import io.heapy.kotbusta.jooq.tables.KindleDevices.KindleDevicesPath
import io.heapy.kotbusta.jooq.tables.KindleSendEvents.KindleSendEventsPath
import io.heapy.kotbusta.jooq.tables.Users.UsersPath
import io.heapy.kotbusta.jooq.tables.records.KindleSendQueueRecord

import kotlin.collections.Collection
import kotlin.collections.List
import kotlin.time.Instant

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class KindleSendQueue(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, KindleSendQueueRecord>?,
    parentPath: InverseForeignKey<out Record, KindleSendQueueRecord>?,
    aliased: Table<KindleSendQueueRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<KindleSendQueueRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>KINDLE_SEND_QUEUE</code>
         */
        val KINDLE_SEND_QUEUE: KindleSendQueue = KindleSendQueue()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<KindleSendQueueRecord> = KindleSendQueueRecord::class.java

    /**
     * The column <code>KINDLE_SEND_QUEUE.ID</code>.
     */
    val ID: TableField<KindleSendQueueRecord, Int?> = createField(DSL.name("ID"), SQLDataType.INTEGER.identity(true), this, "")

    /**
     * The column <code>KINDLE_SEND_QUEUE.USER_ID</code>.
     */
    val USER_ID: TableField<KindleSendQueueRecord, Int?> = createField(DSL.name("USER_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KINDLE_SEND_QUEUE.DEVICE_ID</code>.
     */
    val DEVICE_ID: TableField<KindleSendQueueRecord, Int?> = createField(DSL.name("DEVICE_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KINDLE_SEND_QUEUE.BOOK_ID</code>.
     */
    val BOOK_ID: TableField<KindleSendQueueRecord, Int?> = createField(DSL.name("BOOK_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>KINDLE_SEND_QUEUE.FORMAT</code>.
     */
    val FORMAT: TableField<KindleSendQueueRecord, String?> = createField(DSL.name("FORMAT"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'EPUB'"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>KINDLE_SEND_QUEUE.STATUS</code>.
     */
    val STATUS: TableField<KindleSendQueueRecord, String?> = createField(DSL.name("STATUS"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'PENDING'"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>KINDLE_SEND_QUEUE.ATTEMPTS</code>.
     */
    val ATTEMPTS: TableField<KindleSendQueueRecord, Int?> = createField(DSL.name("ATTEMPTS"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>KINDLE_SEND_QUEUE.NEXT_RUN_AT</code>.
     */
    val NEXT_RUN_AT: TableField<KindleSendQueueRecord, Instant?> = createField(DSL.name("NEXT_RUN_AT"), SQLDataType.CLOB.nullable(false), this, "", KotlinInstantConverter())

    /**
     * The column <code>KINDLE_SEND_QUEUE.LAST_ERROR</code>.
     */
    val LAST_ERROR: TableField<KindleSendQueueRecord, String?> = createField(DSL.name("LAST_ERROR"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>KINDLE_SEND_QUEUE.CREATED_AT</code>.
     */
    val CREATED_AT: TableField<KindleSendQueueRecord, Instant?> = createField(DSL.name("CREATED_AT"), SQLDataType.CLOB.nullable(false), this, "", KotlinInstantConverter())

    /**
     * The column <code>KINDLE_SEND_QUEUE.UPDATED_AT</code>.
     */
    val UPDATED_AT: TableField<KindleSendQueueRecord, Instant?> = createField(DSL.name("UPDATED_AT"), SQLDataType.CLOB.nullable(false), this, "", KotlinInstantConverter())

    private constructor(alias: Name, aliased: Table<KindleSendQueueRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<KindleSendQueueRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<KindleSendQueueRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>KINDLE_SEND_QUEUE</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>KINDLE_SEND_QUEUE</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>KINDLE_SEND_QUEUE</code> table reference
     */
    constructor(): this(DSL.name("KINDLE_SEND_QUEUE"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, KindleSendQueueRecord>?, parentPath: InverseForeignKey<out Record, KindleSendQueueRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, KINDLE_SEND_QUEUE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class KindleSendQueuePath : KindleSendQueue, Path<KindleSendQueueRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, KindleSendQueueRecord>?, parentPath: InverseForeignKey<out Record, KindleSendQueueRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<KindleSendQueueRecord>): super(alias, aliased)
        override fun `as`(alias: String): KindleSendQueuePath = KindleSendQueuePath(DSL.name(alias), this)
        override fun `as`(alias: Name): KindleSendQueuePath = KindleSendQueuePath(alias, this)
        override fun `as`(alias: Table<*>): KindleSendQueuePath = KindleSendQueuePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_KINDLE_SEND_QUEUE_BOOK, IDX_KINDLE_SEND_QUEUE_DEVICE, IDX_KINDLE_SEND_QUEUE_NEXT_RUN, IDX_KINDLE_SEND_QUEUE_STATUS, IDX_KINDLE_SEND_QUEUE_USER)
    override fun getIdentity(): Identity<KindleSendQueueRecord, Int?> = super.getIdentity() as Identity<KindleSendQueueRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<KindleSendQueueRecord> = KINDLE_SEND_QUEUE__PK_KINDLE_SEND_QUEUE
    override fun getReferences(): List<ForeignKey<KindleSendQueueRecord, *>> = listOf(KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_BOOKS, KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_KINDLE_DEVICES, KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_USERS)

    /**
     * Get the implicit join path to the <code>BOOKS</code> table.
     */
    fun books(): BooksPath = books
    val books: BooksPath by lazy { BooksPath(this, KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_BOOKS, null) }

    /**
     * Get the implicit join path to the <code>KINDLE_DEVICES</code> table.
     */
    fun kindleDevices(): KindleDevicesPath = kindleDevices
    val kindleDevices: KindleDevicesPath by lazy { KindleDevicesPath(this, KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_KINDLE_DEVICES, null) }

    /**
     * Get the implicit join path to the <code>USERS</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, KINDLE_SEND_QUEUE__FK_KINDLE_SEND_QUEUE_PK_USERS, null) }

    private lateinit var _kindleSendEvents: KindleSendEventsPath

    /**
     * Get the implicit to-many join path to the <code>KINDLE_SEND_EVENTS</code>
     * table
     */
    fun kindleSendEvents(): KindleSendEventsPath {
        if (!this::_kindleSendEvents.isInitialized)
            _kindleSendEvents = KindleSendEventsPath(this, null, KINDLE_SEND_EVENTS__FK_KINDLE_SEND_EVENTS_PK_KINDLE_SEND_QUEUE.inverseKey)

        return _kindleSendEvents;
    }

    val kindleSendEvents: KindleSendEventsPath
        get(): KindleSendEventsPath = kindleSendEvents()
    override fun `as`(alias: String): KindleSendQueue = KindleSendQueue(DSL.name(alias), this)
    override fun `as`(alias: Name): KindleSendQueue = KindleSendQueue(alias, this)
    override fun `as`(alias: Table<*>): KindleSendQueue = KindleSendQueue(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): KindleSendQueue = KindleSendQueue(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): KindleSendQueue = KindleSendQueue(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): KindleSendQueue = KindleSendQueue(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): KindleSendQueue = KindleSendQueue(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): KindleSendQueue = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): KindleSendQueue = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): KindleSendQueue = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): KindleSendQueue = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): KindleSendQueue = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): KindleSendQueue = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): KindleSendQueue = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): KindleSendQueue = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): KindleSendQueue = where(DSL.notExists(select))
}
