/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.pojos


import io.heapy.kotbusta.jooq.enums.JobStatusEnum
import io.heapy.kotbusta.jooq.enums.JobTypeEnum
import io.heapy.kotbusta.jooq.tables.interfaces.IImportJobs

import java.time.OffsetDateTime


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
data class ImportJobs(
    override val id: Long? = null,
    override val jobType: JobTypeEnum,
    override val status: JobStatusEnum,
    override val progress: String? = null,
    override val inpFilesProcessed: Int? = null,
    override val booksAdded: Int? = null,
    override val booksUpdated: Int? = null,
    override val booksDeleted: Int? = null,
    override val coversAdded: Int? = null,
    override val bookErrors: Int? = null,
    override val coverErrors: Int? = null,
    override val errorMessage: String? = null,
    override val startedAt: OffsetDateTime? = null,
    override val completedAt: OffsetDateTime? = null,
    override val createdAt: OffsetDateTime? = null
): IImportJobs {

    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: ImportJobs = other as ImportJobs
        if (this.id == null) {
            if (o.id != null)
                return false
        }
        else if (this.id != o.id)
            return false
        if (this.jobType != o.jobType)
            return false
        if (this.status != o.status)
            return false
        if (this.progress == null) {
            if (o.progress != null)
                return false
        }
        else if (this.progress != o.progress)
            return false
        if (this.inpFilesProcessed == null) {
            if (o.inpFilesProcessed != null)
                return false
        }
        else if (this.inpFilesProcessed != o.inpFilesProcessed)
            return false
        if (this.booksAdded == null) {
            if (o.booksAdded != null)
                return false
        }
        else if (this.booksAdded != o.booksAdded)
            return false
        if (this.booksUpdated == null) {
            if (o.booksUpdated != null)
                return false
        }
        else if (this.booksUpdated != o.booksUpdated)
            return false
        if (this.booksDeleted == null) {
            if (o.booksDeleted != null)
                return false
        }
        else if (this.booksDeleted != o.booksDeleted)
            return false
        if (this.coversAdded == null) {
            if (o.coversAdded != null)
                return false
        }
        else if (this.coversAdded != o.coversAdded)
            return false
        if (this.bookErrors == null) {
            if (o.bookErrors != null)
                return false
        }
        else if (this.bookErrors != o.bookErrors)
            return false
        if (this.coverErrors == null) {
            if (o.coverErrors != null)
                return false
        }
        else if (this.coverErrors != o.coverErrors)
            return false
        if (this.errorMessage == null) {
            if (o.errorMessage != null)
                return false
        }
        else if (this.errorMessage != o.errorMessage)
            return false
        if (this.startedAt == null) {
            if (o.startedAt != null)
                return false
        }
        else if (this.startedAt != o.startedAt)
            return false
        if (this.completedAt == null) {
            if (o.completedAt != null)
                return false
        }
        else if (this.completedAt != o.completedAt)
            return false
        if (this.createdAt == null) {
            if (o.createdAt != null)
                return false
        }
        else if (this.createdAt != o.createdAt)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.id == null) 0 else this.id.hashCode())
        result = prime * result + this.jobType.hashCode()
        result = prime * result + this.status.hashCode()
        result = prime * result + (if (this.progress == null) 0 else this.progress.hashCode())
        result = prime * result + (if (this.inpFilesProcessed == null) 0 else this.inpFilesProcessed.hashCode())
        result = prime * result + (if (this.booksAdded == null) 0 else this.booksAdded.hashCode())
        result = prime * result + (if (this.booksUpdated == null) 0 else this.booksUpdated.hashCode())
        result = prime * result + (if (this.booksDeleted == null) 0 else this.booksDeleted.hashCode())
        result = prime * result + (if (this.coversAdded == null) 0 else this.coversAdded.hashCode())
        result = prime * result + (if (this.bookErrors == null) 0 else this.bookErrors.hashCode())
        result = prime * result + (if (this.coverErrors == null) 0 else this.coverErrors.hashCode())
        result = prime * result + (if (this.errorMessage == null) 0 else this.errorMessage.hashCode())
        result = prime * result + (if (this.startedAt == null) 0 else this.startedAt.hashCode())
        result = prime * result + (if (this.completedAt == null) 0 else this.completedAt.hashCode())
        result = prime * result + (if (this.createdAt == null) 0 else this.createdAt.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("ImportJobs (")

        sb.append(id)
        sb.append(", ").append(jobType)
        sb.append(", ").append(status)
        sb.append(", ").append(progress)
        sb.append(", ").append(inpFilesProcessed)
        sb.append(", ").append(booksAdded)
        sb.append(", ").append(booksUpdated)
        sb.append(", ").append(booksDeleted)
        sb.append(", ").append(coversAdded)
        sb.append(", ").append(bookErrors)
        sb.append(", ").append(coverErrors)
        sb.append(", ").append(errorMessage)
        sb.append(", ").append(startedAt)
        sb.append(", ").append(completedAt)
        sb.append(", ").append(createdAt)

        sb.append(")")
        return sb.toString()
    }
}
