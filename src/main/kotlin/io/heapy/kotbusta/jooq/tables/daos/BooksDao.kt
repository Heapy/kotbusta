/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables.daos


import io.heapy.kotbusta.jooq.tables.Books
import io.heapy.kotbusta.jooq.tables.records.BooksRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class BooksDao(configuration: Configuration?) : DAOImpl<BooksRecord, io.heapy.kotbusta.jooq.tables.pojos.Books, Long>(Books.BOOKS, io.heapy.kotbusta.jooq.tables.pojos.Books::class.java, configuration) {

    /**
     * Create a new BooksDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: io.heapy.kotbusta.jooq.tables.pojos.Books): Long = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long, upperInclusive: Long): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): io.heapy.kotbusta.jooq.tables.pojos.Books? = fetchOne(Books.BOOKS.ID, value)

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTitle(lowerInclusive: String, upperInclusive: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    fun fetchByTitle(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.TITLE, *values)

    /**
     * Fetch records that have <code>annotation BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAnnotation(lowerInclusive: String?, upperInclusive: String?): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.ANNOTATION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>annotation IN (values)</code>
     */
    fun fetchByAnnotation(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.ANNOTATION, *values)

    /**
     * Fetch records that have <code>genre BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfGenre(lowerInclusive: String?, upperInclusive: String?): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.GENRE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>genre IN (values)</code>
     */
    fun fetchByGenre(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.GENRE, *values)

    /**
     * Fetch records that have <code>language BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLanguage(lowerInclusive: String?, upperInclusive: String?): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.LANGUAGE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>language IN (values)</code>
     */
    fun fetchByLanguage(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.LANGUAGE, *values)

    /**
     * Fetch records that have <code>series_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSeriesId(lowerInclusive: Long?, upperInclusive: Long?): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.SERIES_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>series_id IN (values)</code>
     */
    fun fetchBySeriesId(vararg values: Long): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.SERIES_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>series_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSeriesNumber(lowerInclusive: Int?, upperInclusive: Int?): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.SERIES_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>series_number IN (values)</code>
     */
    fun fetchBySeriesNumber(vararg values: Int): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.SERIES_NUMBER, *values.toTypedArray())

    /**
     * Fetch records that have <code>file_path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFilePath(lowerInclusive: String, upperInclusive: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.FILE_PATH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>file_path IN (values)</code>
     */
    fun fetchByFilePath(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.FILE_PATH, *values)

    /**
     * Fetch records that have <code>archive_path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfArchivePath(lowerInclusive: String, upperInclusive: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.ARCHIVE_PATH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>archive_path IN (values)</code>
     */
    fun fetchByArchivePath(vararg values: String): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.ARCHIVE_PATH, *values)

    /**
     * Fetch records that have <code>file_size BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFileSize(lowerInclusive: Long?, upperInclusive: Long?): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.FILE_SIZE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>file_size IN (values)</code>
     */
    fun fetchByFileSize(vararg values: Long): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.FILE_SIZE, *values.toTypedArray())

    /**
     * Fetch records that have <code>date_added BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDateAdded(lowerInclusive: OffsetDateTime, upperInclusive: OffsetDateTime): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.DATE_ADDED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>date_added IN (values)</code>
     */
    fun fetchByDateAdded(vararg values: OffsetDateTime): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.DATE_ADDED, *values)

    /**
     * Fetch records that have <code>cover_image BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCoverImage(lowerInclusive: ByteArray?, upperInclusive: ByteArray?): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.COVER_IMAGE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>cover_image IN (values)</code>
     */
    fun fetchByCoverImage(vararg values: ByteArray): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.COVER_IMAGE, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetchRange(Books.BOOKS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<io.heapy.kotbusta.jooq.tables.pojos.Books> = fetch(Books.BOOKS.CREATED_AT, *values)
}
