/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.tables


import io.heapy.kotbusta.jooq.Public
import io.heapy.kotbusta.jooq.keys.DOWNLOADS__FK_DOWNLOADS_USER
import io.heapy.kotbusta.jooq.keys.USERS_GOOGLE_ID_KEY
import io.heapy.kotbusta.jooq.keys.USERS_PKEY
import io.heapy.kotbusta.jooq.keys.USER_COMMENTS__FK_USER_COMMENTS_USER
import io.heapy.kotbusta.jooq.keys.USER_NOTES__FK_USER_NOTES_USER
import io.heapy.kotbusta.jooq.keys.USER_STARS__FK_USER_STARS_USER
import io.heapy.kotbusta.jooq.tables.Books.BooksPath
import io.heapy.kotbusta.jooq.tables.Downloads.DownloadsPath
import io.heapy.kotbusta.jooq.tables.UserComments.UserCommentsPath
import io.heapy.kotbusta.jooq.tables.UserNotes.UserNotesPath
import io.heapy.kotbusta.jooq.tables.UserStars.UserStarsPath
import io.heapy.kotbusta.jooq.tables.records.UsersRecord

import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Users(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UsersRecord>?,
    parentPath: InverseForeignKey<out Record, UsersRecord>?,
    aliased: Table<UsersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UsersRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.users</code>
         */
        val USERS: Users = Users()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersRecord> = UsersRecord::class.java

    /**
     * The column <code>public.users.id</code>.
     */
    val ID: TableField<UsersRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.users.google_id</code>.
     */
    val GOOGLE_ID: TableField<UsersRecord, String?> = createField(DSL.name("google_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.users.email</code>.
     */
    val EMAIL: TableField<UsersRecord, String?> = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.users.name</code>.
     */
    val NAME: TableField<UsersRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.users.avatar_url</code>.
     */
    val AVATAR_URL: TableField<UsersRecord, String?> = createField(DSL.name("avatar_url"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.users.created_at</code>.
     */
    val CREATED_AT: TableField<UsersRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.users.updated_at</code>.
     */
    val UPDATED_AT: TableField<UsersRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<UsersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.users</code> table reference
     */
    constructor(): this(DSL.name("users"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UsersRecord>?, parentPath: InverseForeignKey<out Record, UsersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, USERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class UsersPath : Users, Path<UsersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UsersRecord>?, parentPath: InverseForeignKey<out Record, UsersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<UsersRecord>): super(alias, aliased)
        override fun `as`(alias: String): UsersPath = UsersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): UsersPath = UsersPath(alias, this)
        override fun `as`(alias: Table<*>): UsersPath = UsersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<UsersRecord, Long?> = super.getIdentity() as Identity<UsersRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<UsersRecord> = USERS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<UsersRecord>> = listOf(USERS_GOOGLE_ID_KEY)

    private lateinit var _downloads: DownloadsPath

    /**
     * Get the implicit to-many join path to the <code>public.downloads</code>
     * table
     */
    fun downloads(): DownloadsPath {
        if (!this::_downloads.isInitialized)
            _downloads = DownloadsPath(this, null, DOWNLOADS__FK_DOWNLOADS_USER.inverseKey)

        return _downloads;
    }

    val downloads: DownloadsPath
        get(): DownloadsPath = downloads()

    private lateinit var _userComments: UserCommentsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_comments</code> table
     */
    fun userComments(): UserCommentsPath {
        if (!this::_userComments.isInitialized)
            _userComments = UserCommentsPath(this, null, USER_COMMENTS__FK_USER_COMMENTS_USER.inverseKey)

        return _userComments;
    }

    val userComments: UserCommentsPath
        get(): UserCommentsPath = userComments()

    private lateinit var _userNotes: UserNotesPath

    /**
     * Get the implicit to-many join path to the <code>public.user_notes</code>
     * table
     */
    fun userNotes(): UserNotesPath {
        if (!this::_userNotes.isInitialized)
            _userNotes = UserNotesPath(this, null, USER_NOTES__FK_USER_NOTES_USER.inverseKey)

        return _userNotes;
    }

    val userNotes: UserNotesPath
        get(): UserNotesPath = userNotes()

    private lateinit var _userStars: UserStarsPath

    /**
     * Get the implicit to-many join path to the <code>public.user_stars</code>
     * table
     */
    fun userStars(): UserStarsPath {
        if (!this::_userStars.isInitialized)
            _userStars = UserStarsPath(this, null, USER_STARS__FK_USER_STARS_USER.inverseKey)

        return _userStars;
    }

    val userStars: UserStarsPath
        get(): UserStarsPath = userStars()

    /**
     * Get the implicit many-to-many join path to the <code>public.books</code>
     * table
     */
    val books: BooksPath
        get(): BooksPath = userStars().books()
    override fun `as`(alias: String): Users = Users(DSL.name(alias), this)
    override fun `as`(alias: Name): Users = Users(alias, this)
    override fun `as`(alias: Table<*>): Users = Users(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Users = Users(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Users = Users(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Users = Users(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Users = Users(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Users = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Users = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Users = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Users = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Users = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Users = where(DSL.notExists(select))
}
