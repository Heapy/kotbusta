@file:Suppress("warnings")
/*
 * This file is generated by jOOQ.
 */
package io.heapy.kotbusta.jooq.keys


import io.heapy.kotbusta.jooq.tables.Authors
import io.heapy.kotbusta.jooq.tables.BookAuthors
import io.heapy.kotbusta.jooq.tables.Books
import io.heapy.kotbusta.jooq.tables.Downloads
import io.heapy.kotbusta.jooq.tables.Series
import io.heapy.kotbusta.jooq.tables.UserComments
import io.heapy.kotbusta.jooq.tables.UserNotes
import io.heapy.kotbusta.jooq.tables.UserStars
import io.heapy.kotbusta.jooq.tables.Users
import io.heapy.kotbusta.jooq.tables.records.AuthorsRecord
import io.heapy.kotbusta.jooq.tables.records.BookAuthorsRecord
import io.heapy.kotbusta.jooq.tables.records.BooksRecord
import io.heapy.kotbusta.jooq.tables.records.DownloadsRecord
import io.heapy.kotbusta.jooq.tables.records.SeriesRecord
import io.heapy.kotbusta.jooq.tables.records.UserCommentsRecord
import io.heapy.kotbusta.jooq.tables.records.UserNotesRecord
import io.heapy.kotbusta.jooq.tables.records.UserStarsRecord
import io.heapy.kotbusta.jooq.tables.records.UsersRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.QOM.ForeignKeyRule



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val AUTHORS_PKEY: UniqueKey<AuthorsRecord> = Internal.createUniqueKey(Authors.AUTHORS, DSL.name("authors_pkey"), arrayOf(Authors.AUTHORS.ID), true)
val BOOK_AUTHORS_PKEY: UniqueKey<BookAuthorsRecord> = Internal.createUniqueKey(BookAuthors.BOOK_AUTHORS, DSL.name("book_authors_pkey"), arrayOf(BookAuthors.BOOK_AUTHORS.BOOK_ID, BookAuthors.BOOK_AUTHORS.AUTHOR_ID), true)
val BOOKS_PKEY: UniqueKey<BooksRecord> = Internal.createUniqueKey(Books.BOOKS, DSL.name("books_pkey"), arrayOf(Books.BOOKS.ID), true)
val DOWNLOADS_PKEY: UniqueKey<DownloadsRecord> = Internal.createUniqueKey(Downloads.DOWNLOADS, DSL.name("downloads_pkey"), arrayOf(Downloads.DOWNLOADS.ID), true)
val SERIES_PKEY: UniqueKey<SeriesRecord> = Internal.createUniqueKey(Series.SERIES, DSL.name("series_pkey"), arrayOf(Series.SERIES.ID), true)
val USER_COMMENTS_PKEY: UniqueKey<UserCommentsRecord> = Internal.createUniqueKey(UserComments.USER_COMMENTS, DSL.name("user_comments_pkey"), arrayOf(UserComments.USER_COMMENTS.ID), true)
val USER_NOTES_PKEY: UniqueKey<UserNotesRecord> = Internal.createUniqueKey(UserNotes.USER_NOTES, DSL.name("user_notes_pkey"), arrayOf(UserNotes.USER_NOTES.ID), true)
val USER_STARS_PKEY: UniqueKey<UserStarsRecord> = Internal.createUniqueKey(UserStars.USER_STARS, DSL.name("user_stars_pkey"), arrayOf(UserStars.USER_STARS.USER_ID, UserStars.USER_STARS.BOOK_ID), true)
val USERS_GOOGLE_ID_KEY: UniqueKey<UsersRecord> = Internal.createUniqueKey(Users.USERS, DSL.name("users_google_id_key"), arrayOf(Users.USERS.GOOGLE_ID), true)
val USERS_PKEY: UniqueKey<UsersRecord> = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), arrayOf(Users.USERS.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val BOOK_AUTHORS__FK_BOOK_AUTHORS_AUTHOR: ForeignKey<BookAuthorsRecord, AuthorsRecord> = Internal.createForeignKey(BookAuthors.BOOK_AUTHORS, DSL.name("fk_book_authors_author"), arrayOf(BookAuthors.BOOK_AUTHORS.AUTHOR_ID), io.heapy.kotbusta.jooq.keys.AUTHORS_PKEY, arrayOf(Authors.AUTHORS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val BOOK_AUTHORS__FK_BOOK_AUTHORS_BOOK: ForeignKey<BookAuthorsRecord, BooksRecord> = Internal.createForeignKey(BookAuthors.BOOK_AUTHORS, DSL.name("fk_book_authors_book"), arrayOf(BookAuthors.BOOK_AUTHORS.BOOK_ID), io.heapy.kotbusta.jooq.keys.BOOKS_PKEY, arrayOf(Books.BOOKS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val BOOKS__FK_BOOKS_SERIES: ForeignKey<BooksRecord, SeriesRecord> = Internal.createForeignKey(Books.BOOKS, DSL.name("fk_books_series"), arrayOf(Books.BOOKS.SERIES_ID), io.heapy.kotbusta.jooq.keys.SERIES_PKEY, arrayOf(Series.SERIES.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val DOWNLOADS__FK_DOWNLOADS_BOOK: ForeignKey<DownloadsRecord, BooksRecord> = Internal.createForeignKey(Downloads.DOWNLOADS, DSL.name("fk_downloads_book"), arrayOf(Downloads.DOWNLOADS.BOOK_ID), io.heapy.kotbusta.jooq.keys.BOOKS_PKEY, arrayOf(Books.BOOKS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val DOWNLOADS__FK_DOWNLOADS_USER: ForeignKey<DownloadsRecord, UsersRecord> = Internal.createForeignKey(Downloads.DOWNLOADS, DSL.name("fk_downloads_user"), arrayOf(Downloads.DOWNLOADS.USER_ID), io.heapy.kotbusta.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val USER_COMMENTS__FK_USER_COMMENTS_BOOK: ForeignKey<UserCommentsRecord, BooksRecord> = Internal.createForeignKey(UserComments.USER_COMMENTS, DSL.name("fk_user_comments_book"), arrayOf(UserComments.USER_COMMENTS.BOOK_ID), io.heapy.kotbusta.jooq.keys.BOOKS_PKEY, arrayOf(Books.BOOKS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val USER_COMMENTS__FK_USER_COMMENTS_USER: ForeignKey<UserCommentsRecord, UsersRecord> = Internal.createForeignKey(UserComments.USER_COMMENTS, DSL.name("fk_user_comments_user"), arrayOf(UserComments.USER_COMMENTS.USER_ID), io.heapy.kotbusta.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val USER_NOTES__FK_USER_NOTES_BOOK: ForeignKey<UserNotesRecord, BooksRecord> = Internal.createForeignKey(UserNotes.USER_NOTES, DSL.name("fk_user_notes_book"), arrayOf(UserNotes.USER_NOTES.BOOK_ID), io.heapy.kotbusta.jooq.keys.BOOKS_PKEY, arrayOf(Books.BOOKS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val USER_NOTES__FK_USER_NOTES_USER: ForeignKey<UserNotesRecord, UsersRecord> = Internal.createForeignKey(UserNotes.USER_NOTES, DSL.name("fk_user_notes_user"), arrayOf(UserNotes.USER_NOTES.USER_ID), io.heapy.kotbusta.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val USER_STARS__FK_USER_STARS_BOOK: ForeignKey<UserStarsRecord, BooksRecord> = Internal.createForeignKey(UserStars.USER_STARS, DSL.name("fk_user_stars_book"), arrayOf(UserStars.USER_STARS.BOOK_ID), io.heapy.kotbusta.jooq.keys.BOOKS_PKEY, arrayOf(Books.BOOKS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val USER_STARS__FK_USER_STARS_USER: ForeignKey<UserStarsRecord, UsersRecord> = Internal.createForeignKey(UserStars.USER_STARS, DSL.name("fk_user_stars_user"), arrayOf(UserStars.USER_STARS.USER_ID), io.heapy.kotbusta.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
